import json
import numpy as np
from scipy import linalg
from matplotlib import pyplot as plt

def fem(listX, m = 2.0, outpath = 'myfem.json', plotfile = 'myfem.png', plot = True):
    # load node locations
    nodes = np.array(listX)
    totalNodes = len(listX)
    
    # construct array of delta x_i's
    delX = np.zeros(totalNodes - 1)
    for i in range(totalNodes - 1):
        delX[i] = nodes[i + 1] - nodes[i]

    # check delta x_i sums to 1
    assert(sum(delX) == 1)

    # build stiffness matrix
    size = totalNodes - 2
    diag = np.zeros(size)
    for i in range(size):
        value = (1/delX[i]) + (1/delX[i + 1])
        diag[i] = value

    offDiag = np.zeros(size - 1)
    for i in range(size - 1):
        offDiag[i] = -1/delX[i + 1]
    # combine diagonal and off-diagonals 
    matrix = np.diag(diag, 0) + np.diag(offDiag, -1) + np.diag(offDiag, 1)

    # build RHS column 
    rightSide = np.zeros((size, 1))
    for i in range(size):
        rightSide[i, 0] = (m / 2) * (delX[i] + delX[i + 1])

    # solve for concentration array
    c = linalg.solve(matrix, rightSide)
    # include boundary conditions
    c = np.insert(c, size, 0, 0)
    c = np.insert(c, 0, 0, 0)

    # plot results
    if plot:
        t = np.linspace(0, 1)
        exact = np.zeros(len(t))
        for i in range(len(t)):
            exact[i] = t[i] - (t[i] ** 2)
        
        plt.plot(t, exact, 'k', linestyle = 'dashed', label = 'exact')
        plt.plot(nodes, c, 'b', label = 'computed')
        plt.xlabel('x')
        plt.ylabel('c(x)')
        plt.legend()
        plt.show()
        plt.savefig(plotfile)
    
    # save results
    results = dict()
    results['x'] = nodes.tolist()
    c = c.tolist()
    results['comp'] = [item for sublist in c for item in sublist]
    with open(outpath, 'w') as fp:
        json.dump(results, fp)

listX = [0, 0.1, 0.18, 0.24, 0.3, 0.37, 0.4, 0.43, 0.46, 0.5, 0.54, 0.62, 0.7, 0.75, 0.8, 0.85, 0.92, 1]
fem(listX, m = 2.0, outpath = 'myfem.json', plotfile = 'myfem.png', plot = True)

def fem_err(inpath = 'myfem.json'):
    # load and extract data from file
    with open(inpath) as f:
        data = json.load(f)
    x = data['x']
    c = data['comp']
    numNodes = len(x)

    # construct array of delta x_i's
    delX = np.zeros(numNodes - 1)
    for i in range(numNodes - 1):
        delX[i] = x[i + 1] - x[i]
    print(delX)
    # check delta x_i sums to 1
    assert(sum(delX) == 1)

    # equation for exact concentration
    exact = lambda x : x - x ** 2

    # array of errors 
    error = np.zeros(numNodes - 1)
    for i in range(len(error)):
        mid = x[i] + (delX[i] / 2)
        exactVal = exact(mid)

        femVal = 0.5 * (exact(x[i]) + exact(x[i + 1]))
        error[i] = abs(exactVal - femVal)
    
    # average error
    numElem = len(error)
    average = sum(error) / numElem
    print(average)
    return numElem, average

fem_err()

def partb():
    (n_4, avg_4) = fem_err('fem4.json')
    (n_8, avg_8) = fem_err('fem8.json')
    (n_16, avg_16) = fem_err('fem16.json')
    print(avg_16)

    error = [avg_4, avg_8, avg_16]
    n =[n_4, n_8, n_16]

    plt.plot(n, error, 'k', label = 'average absolute error')
   
    plt.xlabel('N, number of elements')
    plt.ylabel('Average absolute error')
    plt.legend()
    plt.show()


def partc():
    nodes = np.load('nonuniform.npy')
    totalNodes = len(nodes)
    print(nodes)




